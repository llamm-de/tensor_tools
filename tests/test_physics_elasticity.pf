module test_physics_elasticity
    use funit
    use libtt_precision
    use libtt_physics_elasticity

    implicit none

    real(kind=dp), dimension(3,3) :: defGrad

contains

    @before
    subroutine set_up()

        defGrad = reshape((/1, 2, 3, 4, 5, 6, 7, 8, 9/),&
                          (/3,3/))

    end subroutine set_up


    @test
    subroutine assert_rightCauchyGreen()
        real(kind=dp), dimension(3,3) :: expected_rightCauchyGreen

        expected_rightCauchyGreen = reshape((/14, 32, 50, 32, 77, 122, 50, 122, 194/),&
                                   (/3,3/))

        @assertEqual(expected_rightCauchyGreen, getRightCauchyGreen(defGrad))
    end subroutine assert_rightCauchyGreen


    @test
    subroutine assert_leftCauchyGreen()
        real(kind=dp), dimension(3,3) :: expected_leftCauchyGreen

        expected_leftCauchyGreen = reshape((/66, 78, 90, 78, 93, 108, 90, 108, 126/),&
                                  (/3,3/))

        @assertEqual(expected_leftCauchyGreen, getLeftCauchyGreen(defGrad))
    end subroutine assert_leftCauchyGreen


    @test
    subroutine assert_greenLagrange()
        real(kind=dp), dimension(3,3) :: expected_result
        real(kind=dp), dimension(3,3) :: rightCauchyGreen

        expected_result = 0.5 * reshape((/13, 32, 50, 32, 76, 122, 50, 122, 193/),&
                                  (/3,3/))

        rightCauchyGreen = getRightCauchyGreen(defGrad)
        
        @assertEqual(expected_result, getGreenLagrange(rightCauchyGreen))
    end subroutine assert_greenLagrange

end module test_physics_elasticity