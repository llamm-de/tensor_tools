module test_common
    use funit
    use libtt_precision
    use libtt_common,        only: kronecker,trace,det,inverseMatrix
    use libtt_common_lapack, only: inverse

    implicit none

    real(kind=dp), dimension(3,3), parameter :: A = reshape((/1, 2, 3, &
                                                             4, 5, 6, &
                                                             7, 8, 9/),&
                                                            (/3,3/))

contains

    @test
    subroutine assert_iEqualJReturnsOne()
        integer :: res

        res = kronecker(1,1)

        @assertTrue(res == 1)
    end subroutine assert_iEqualJReturnsOne


    @test
    subroutine assert_iNotEqualJReturnsZero()
        integer :: res

        res = kronecker(1,2)

        @assertTrue(res == 0)
    end subroutine assert_iNotEqualJReturnsZero

    !@test
    subroutine assert_failsIfNonSymmetric()
        real(kind=dp), dimension(2,1) :: A
        real(kind=dp)                 :: res

        A   = 0.0d0
        res = trace(A)

        @assertExceptionRaised('Input must be symmetric!')

    end subroutine assert_failsIfNonSymmetric

    @test
    subroutine assert_result2x2()
        real(kind=dp), dimension(2,2) :: B

        B = reshape((/1, 2, 3, 4/), (/2, 2/))

        @assertEqual(5, trace(B))
    end subroutine assert_result2x2

    @test
    subroutine assert_result3x3()

        @assertEqual(15, trace(A))
    end subroutine assert_result3x3

    @test
    subroutine assert_determinant()
        real(kind=dp), dimension(3,3), parameter :: B = reshape((/2, 2, 3, &
                                                                 4, 5, 6, &
                                                                 7, 8, 9/),&
                                                               (/3,3/))

        @assertEqual(-3.0d0, det(B))
     end subroutine assert_determinant

     @test
     subroutine assert_inverseMatrix()
        real(kind=dp), dimension(2,2) :: A
        real(kind=dp), dimension(2,2) :: expected_result

        A = reshape((/2 ,1 ,-3 ,5/), (/2,2/))
        expected_result = reshape((/ 5.0, -1.0, 3.0, 2.0 /), (/2,2/))
        expected_result = expected_result / 13.0

        @assertEqual(expected_result, inverseMatrix(A))
     end subroutine assert_inverseMatrix

     @test
     subroutine assert_inverse_lapack()
        real(kind=dp), dimension(2,2) :: A
        real(kind=dp), dimension(2,2) :: expected_result

        A = reshape((/2 ,1 ,-3 ,5/), (/2,2/))
        expected_result = reshape((/ 5.0, -1.0, 3.0, 2.0 /), (/2,2/))
        expected_result = expected_result / 13.0

        @assertEqual(expected_result, inverse(A))
     end subroutine assert_inverse_lapack

end module test_common