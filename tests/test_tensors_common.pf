module test_tensors_common
    use funit
    use libtt_tensors_common

    implicit none

    real(kind=8), dimension(3,3) :: expected_result
    real(kind=8), dimension(3,3) :: A 

contains

    @before
    subroutine set_up()
        
        A = reshape((/1, 2, 3, &
                      4, 5, 6, &
                      7, 8, 9/),&
                    (/3,3/))

    end subroutine set_up

    @test
    subroutine assert_eye()
        expected_result = reshape((/1, 0, 0, 0, 1, 0, 0, 0, 1/),&
                                   (/3,3/))

        @assertEqual(expected_result, eye())
    end subroutine assert_eye


    @test
    subroutine assert_symmetric()

        expected_result = reshape((/1, 3, 5, 3, 5, 7, 5, 7, 9/),&
                                   (/3,3/))

        @assertEqual(expected_result, symmetric(A))
    end subroutine assert_symmetric


    @test
    subroutine assert_scew()

        expected_result = reshape((/0, -1, -2, 1, 0, -1, 2, 1, 0/),&
                                   (/3,3/))

        @assertEqual(expected_result, scew(A))
    end subroutine assert_scew


    @test
    subroutine assert_scewPlusSymmetric()

        expected_result = A
        @assertEqual(expected_result, scew(A)+symmetric(A))
    end subroutine assert_scewPlusSymmetric


    @test
    subroutine assert_inverse()
        real(kind=8), dimension(3,3), parameter :: B = reshape((/2, 2, 3, &
                                                                 4, 5, 6, &
                                                                 7, 8, 9/),&
                                                                 (/3,3/))

        expected_result = reshape((/1.0d0, -2.0d0, 		1.0d0, &
                                   -2.0d0,  1.0d0, 		0.0d0, &
                                    1.0d0,  2.0d0/3.0d0,  -2.0d0/3.0d0/),&
                                  (/3,3/))

        @assertEqual(expected_result, inverse(B))
    end subroutine assert_inverse

end module test_tensors_common