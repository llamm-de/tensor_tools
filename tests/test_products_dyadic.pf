module test_products_dyadic
    use funit
    use libtt_precision
    use libtt_products, only: dyad, operator(.dyad.)

    implicit none
    
    real(kind=dp), dimension(3)       :: A
    real(kind=dp), dimension(3,3)     :: B
    real(kind=dp), dimension(3,3,3)   :: C

contains

    @before
    subroutine set_up()
        A = (/1, 2, 3/)
        B = reshape((/2, 4, 3, 5, 1, 2, 4, 3, 4/),&
                    (/3,3/))
        C = reshape((/2, 4, 3, 5, 1, 2, 4, 3, 4, &
                      1, 2, 4, 3, 5, 6, 4, 5, 9, &
                      3, 2, 5, 8, 7, 1, 2, 7, 5/),&
                    (/3,3,3/))          
    end subroutine set_up


    @test 
    subroutine assert_rank11()
        real(kind=dp), dimension(3,3) :: expectedResult

        expectedResult = reshape((/1, 2, 3, 2, 4, 6, 3, 6, 9/), (/3,3/))

        @assertEqual(expectedResult, dyad(A,A))
    end subroutine assert_rank11

    @test
    subroutine assert_rank11_itself()
        real(kind=dp), dimension(3,3) :: expectedResult

        expectedResult = reshape((/1, 2, 3, 2, 4, 6, 3, 6, 9/), (/3,3/))

        @assertEqual(expectedResult, dyad(A))
    end subroutine assert_rank11_itself


    @test 
    subroutine assert_rank12()
        real(kind=dp), dimension(3,3,3) :: expectedResult

        expectedResult = reshape((/2, 4, 6, 4, 8, 12, 3, 6, 9, &
                                   5, 10, 15, 1, 2, 3, 2, 4, 6, &
                                   4, 8, 12, 3, 6, 9, 4, 8, 12/), (/3,3,3/))

        @assertEqual(expectedResult, dyad(A,B))
    end subroutine assert_rank12
   

    @test 
    subroutine assert_rank21()
        real(kind=dp), dimension(3,3,3) :: expectedResult

        expectedResult = reshape((/2, 4, 3, 5, 1, 2, 4, 3, 4, &
                                   4, 8, 6, 10, 2, 4, 8, 6, 8, &
                                   6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3,3/))

        @assertEqual(expectedResult, dyad(B,A))
    end subroutine assert_rank21


    @test 
    subroutine assert_rank22()
        real(kind=dp), dimension(3,3,3,3) :: expectedResult

        expectedResult(1,1,:,:) = reshape((/4, 8, 6, 10, 2, 4, 8, 6, 8/), (/3,3/))
        expectedResult(1,2,:,:) = reshape((/10, 20, 15, 25, 5, 10, 20, 15, 20/), (/3,3/))
        expectedResult(1,3,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))
        expectedResult(2,1,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))
        expectedResult(2,2,:,:) = reshape((/2, 4, 3, 5, 1, 2, 4, 3, 4/), (/3,3/))
        expectedResult(2,3,:,:) = reshape((/6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3/))
        expectedResult(3,1,:,:) = reshape((/6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3/))
        expectedResult(3,2,:,:) = reshape((/4, 8, 6, 10, 2, 4, 8, 6, 8/), (/3,3/))
        expectedResult(3,3,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))

        @assertEqual(expectedResult, dyad(B,B))
    end subroutine assert_rank22

    @test 
    subroutine assert_rank22_itself()
        real(kind=dp), dimension(3,3,3,3) :: expectedResult

        expectedResult(1,1,:,:) = reshape((/4, 8, 6, 10, 2, 4, 8, 6, 8/), (/3,3/))
        expectedResult(1,2,:,:) = reshape((/10, 20, 15, 25, 5, 10, 20, 15, 20/), (/3,3/))
        expectedResult(1,3,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))
        expectedResult(2,1,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))
        expectedResult(2,2,:,:) = reshape((/2, 4, 3, 5, 1, 2, 4, 3, 4/), (/3,3/))
        expectedResult(2,3,:,:) = reshape((/6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3/))
        expectedResult(3,1,:,:) = reshape((/6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3/))
        expectedResult(3,2,:,:) = reshape((/4, 8, 6, 10, 2, 4, 8, 6, 8/), (/3,3/))
        expectedResult(3,3,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))

        @assertEqual(expectedResult, dyad(B))
    end subroutine assert_rank22_itself

    @test 
    subroutine assert_rank11_operator()
        real(kind=dp), dimension(3,3) :: expectedResult

        expectedResult = reshape((/1, 2, 3, 2, 4, 6, 3, 6, 9/), (/3,3/))

        @assertEqual(expectedResult, A.dyad.A)
    end subroutine assert_rank11_operator


    @test 
    subroutine assert_rank12_operator()
        real(kind=dp), dimension(3,3,3) :: expectedResult

        expectedResult = reshape((/2, 4, 6, 4, 8, 12, 3, 6, 9, &
                                   5, 10, 15, 1, 2, 3, 2, 4, 6, &
                                   4, 8, 12, 3, 6, 9, 4, 8, 12/), (/3,3,3/))

        @assertEqual(expectedResult, A.dyad.B)
    end subroutine assert_rank12_operator
   

    @test 
    subroutine assert_rank21_operator()
        real(kind=dp), dimension(3,3,3) :: expectedResult

        expectedResult = reshape((/2, 4, 3, 5, 1, 2, 4, 3, 4, &
                                   4, 8, 6, 10, 2, 4, 8, 6, 8, &
                                   6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3,3/))

        @assertEqual(expectedResult, B.dyad.A)
    end subroutine assert_rank21_operator


    @test 
    subroutine assert_rank22_operator()
        real(kind=dp), dimension(3,3,3,3) :: expectedResult

        expectedResult(1,1,:,:) = reshape((/4, 8, 6, 10, 2, 4, 8, 6, 8/), (/3,3/))
        expectedResult(1,2,:,:) = reshape((/10, 20, 15, 25, 5, 10, 20, 15, 20/), (/3,3/))
        expectedResult(1,3,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))
        expectedResult(2,1,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))
        expectedResult(2,2,:,:) = reshape((/2, 4, 3, 5, 1, 2, 4, 3, 4/), (/3,3/))
        expectedResult(2,3,:,:) = reshape((/6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3/))
        expectedResult(3,1,:,:) = reshape((/6, 12, 9, 15, 3, 6, 12, 9, 12/), (/3,3/))
        expectedResult(3,2,:,:) = reshape((/4, 8, 6, 10, 2, 4, 8, 6, 8/), (/3,3/))
        expectedResult(3,3,:,:) = reshape((/8, 16, 12, 20, 4, 8, 16, 12, 16/), (/3,3/))

        @assertEqual(expectedResult, B.dyad.B)
    end subroutine assert_rank22_operator

    
end module test_products_dyadic